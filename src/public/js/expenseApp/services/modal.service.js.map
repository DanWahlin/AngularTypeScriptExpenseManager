{"version":3,"sources":["expenseApp/services/modal.service.ts"],"names":["expenseApp","expenseApp.services","expenseApp.services.ModalService","expenseApp.services.ModalService.constructor","expenseApp.services.ModalService.showModal","expenseApp.services.ModalService.show"],"mappings":"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","file":"expenseApp/services/modal.service.js","sourcesContent":["///<reference path=\"../../../../../tools/typings/tsd.d.ts\" />\n///<reference path=\"../../../../../tools/typings/expenseApp.d.ts\" />\n\nnamespace expenseApp.services {\n\n    interface IModalDefaults {\n        backdrop?: boolean;\n        keyboard?: boolean;\n        modalFade?: boolean;\n        templateUrl?: string;\n        controller?: ($scope, $modalInstance) => void;\n    }\n\n    interface IModalOptions {\n        closeButtonText?: string;\n        actionButtonText?: string;\n        headerText?: string;\n        bodyText?: string;\n    }\n\n    export class ModalService {\n\n        modalDefaults: IModalDefaults = {\n            backdrop: true,\n            keyboard: true,\n            modalFade: true,\n            templateUrl: '/app/expenseApp/partials/modal.html'\n        };\n\n        modalOptions: IModalOptions = {\n            closeButtonText: 'Close',\n            actionButtonText: 'OK',\n            headerText: 'Proceed?',\n            bodyText: 'Perform this action?'\n        };\n\n        static $inject = ['$modal'];\n        constructor(private $modal) {\n\n        }\n\n        showModal(customModalDefaults, customModalOptions) {\n            if (!customModalDefaults) { customModalDefaults = {}; }\n            customModalDefaults.backdrop = 'static';\n            return this.show(customModalDefaults, customModalOptions);\n        }\n\n        show(customModalDefaults, customModalOptions) {\n            //Create temp objects to work with since we're in a singleton service\n            var tempModalDefaults: IModalDefaults = {};\n            var tempModalOptions: IModalOptions = {};\n\n            //Map angular-ui modal custom defaults to modal defaults defined in this service\n            angular.extend(tempModalDefaults, this.modalDefaults, customModalDefaults);\n\n            //Map modal.html $scope custom properties to defaults defined in this service\n            angular.extend(tempModalOptions, this.modalOptions, customModalOptions);\n\n            if (!tempModalDefaults.controller) {\n                tempModalDefaults.controller = function ($scope, $modalInstance) {\n                    $scope.modalOptions = tempModalOptions;\n                    $scope.modalOptions.ok = function (result) {\n                        $modalInstance.close('ok');\n                    };\n                    $scope.modalOptions.close = function (result) {\n                        $modalInstance.close('cancel');\n                    };\n                };\n\n                tempModalDefaults.controller.$inject = ['$scope', '$modalInstance'];\n            }\n\n            return this.$modal.open(tempModalDefaults).result;\n        }\n    }\n\n    angular.module('expenseApp').service('expenseApp.services.modalService', ModalService);\n\n}\n"],"sourceRoot":"/source/"}